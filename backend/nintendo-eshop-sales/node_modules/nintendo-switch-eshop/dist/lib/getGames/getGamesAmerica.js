"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGamesAmerica = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const querystring_1 = require("querystring");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
/**
 * Fetches all games on american e-shops
 *
 * @remarks
 * Currently ONLY returns all games in the e-shop
 *
 * @returns Promise containing all the games
 */
exports.getGamesAmerica = () => __awaiter(void 0, void 0, void 0, function* () {
    const limit = constants_1.US_GAME_LIST_LIMIT;
    const page = 0;
    const body = {
        body: JSON.stringify({
            requests: [
                {
                    indexName: constants_1.US_INDEX_TITLE_ASC,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.everyone}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_DES,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.everyone}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_ASC,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.everyone10}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_DES,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.everyone10}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_ASC,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.teen}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_DES,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.teen}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_ASC,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_ESRB_RATINGS_FILTERS.mature}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                },
                {
                    indexName: constants_1.US_INDEX_TITLE_ASC,
                    params: querystring_1.stringify({
                        query: '',
                        hitsPerPage: limit,
                        page: page,
                        analytics: false,
                        facets: constants_1.US_FACETS,
                        facetFilters: `[["${constants_1.US_AVAILABILITY_FILTER}"],["${constants_1.US_PLATFORM_FACET_FILTER}"]]`
                    })
                }
            ]
        }),
        method: 'POST',
        headers: constants_1.US_ALGOLIA_HEADERS
    };
    try {
        const allGamesResponse = yield node_fetch_1.default(constants_1.US_GET_GAMES_URL, body);
        if (!allGamesResponse.ok)
            throw new Error('US_games_request_failed');
        const gamesResponse = yield allGamesResponse.json();
        let allGames = [];
        for (const results of gamesResponse.results) {
            allGames = allGames.concat(results.hits);
        }
        allGames = utils_1.arrayRemoveDuplicates(allGames, 'slug');
        return allGames;
    }
    catch (err) {
        if (/(?:US_games_request_failed)/i.test(err.toString()))
            throw new utils_1.EshopError('Fetching of US Games failed');
        throw err;
    }
});
//# sourceMappingURL=getGamesAmerica.js.map