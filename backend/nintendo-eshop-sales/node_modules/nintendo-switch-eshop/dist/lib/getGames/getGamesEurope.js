"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGamesEurope = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const querystring_1 = require("querystring");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
/**
 * Fetches all games on the European, Australian or New Zealand eShops
 *
 * @remarks
 * Games from Australia / New Zealand can be limited. They are included only as much as that Nintendo assigns them properly to the PAL region
 *
 * @param options - Request options to pass to the eShop request {@link EURequestOptions | See EURequestOptions for details}
 * @returns Promise containing all requested EU/PAL games
 */
exports.getGamesEurope = (options = { limit: constants_1.EU_GAME_LIST_LIMIT, locale: constants_1.EU_DEFAULT_LOCALE }) => __awaiter(void 0, void 0, void 0, function* () {
    if (!options.limit)
        options.limit = constants_1.EU_GAME_LIST_LIMIT;
    if (!options.locale)
        options.locale = constants_1.EU_DEFAULT_LOCALE;
    try {
        const gamesEU = yield node_fetch_1.default(`${constants_1.EU_GET_GAMES_URL.replace('{locale}', options.locale)}?${querystring_1.stringify(Object.assign({ rows: options.limit }, constants_1.EU_GET_GAMES_OPTIONS))}`);
        if (!gamesEU.ok)
            throw new Error('EU_games_request_failed');
        const gamesData = yield gamesEU.json();
        return gamesData.response.docs;
    }
    catch (err) {
        if (/(?:EU_games_request_failed)/i.test(err.toString()))
            throw new utils_1.EshopError('Fetching of EU Games failed');
        throw err;
    }
});
//# sourceMappingURL=getGamesEurope.js.map