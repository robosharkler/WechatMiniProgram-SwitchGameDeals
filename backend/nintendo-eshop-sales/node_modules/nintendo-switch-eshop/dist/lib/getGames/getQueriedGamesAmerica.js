"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQueriedGamesAmerica = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const querystring_1 = require("querystring");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
/**
 * Fetches a subset of games from the American e-shops as based on a given query
 * @param query The query to search for
 * @returns Promise containing the first 200 games that match your query
 * @license Apache-2.0 Favna & Antonio RomÃ¡n
 * @copyright 2019
 */
exports.getQueriedGamesAmerica = (query) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield node_fetch_1.default(constants_1.US_GET_GAMES_URL, {
        method: 'POST',
        headers: Object.assign(Object.assign({}, constants_1.US_ALGOLIA_HEADERS), { 'X-Algolia-API-Key': constants_1.QUERIED_US_ALGOLIA_KEY }),
        body: JSON.stringify({
            requests: [
                {
                    indexName: 'noa_aem_game_en_us',
                    params: querystring_1.stringify({
                        facetFilters: ['type:game'],
                        hitsPerPage: 200,
                        page: 0,
                        query
                    })
                }
            ]
        })
    });
    if (!response.ok)
        throw new utils_1.EshopError(`Fetching games for the query "${query} failed"`);
    const { results } = yield response.json();
    if (!results.length)
        throw new utils_1.EshopError(`No game results for the query "${query}"`);
    return results[0].hits;
});
//# sourceMappingURL=getQueriedGamesAmerica.js.map