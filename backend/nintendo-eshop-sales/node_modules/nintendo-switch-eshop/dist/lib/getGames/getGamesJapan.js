"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGamesJapan = void 0;
const fast_xml_parser_1 = require("fast-xml-parser");
const node_fetch_1 = __importDefault(require("node-fetch"));
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
/**
 * Fetches all games on japanese eShops
 *
 * @returns Promise containing all the games
 */
exports.getGamesJapan = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const gamesJP = yield node_fetch_1.default(constants_1.JP_GET_GAMES_URL);
        if (!gamesJP.ok)
            throw new Error('JP_games_request_failed');
        const parsedGamesJP = fast_xml_parser_1.parse(yield gamesJP.text());
        const allGamesJP = parsedGamesJP.TitleInfoList.TitleInfo;
        return allGamesJP;
    }
    catch (err) {
        if (/(?:JP_games_request_failed)/i.test(err.toString()))
            throw new utils_1.EshopError('Fetching of JP Games failed');
        throw err;
    }
});
//# sourceMappingURL=getGamesJapan.js.map