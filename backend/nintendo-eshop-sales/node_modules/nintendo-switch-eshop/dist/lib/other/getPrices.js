"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrices = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const querystring_1 = require("querystring");
const constants_1 = require("../utils/constants");
const utils_1 = require("../utils/utils");
/**
 * Gets pricing information for the requested games. Paginates every 50 games.
 *
 * @param country A two digit country code. (ISO 3166-1 alpha-2 country code)
 * @param gameIds One or more NSUID of the corresponding games.
 * @param offset _(Optional)_ The offset to start at
 * @param prices _(Optional)_ An array of {@link TitleData}
 * @returns A promise containing the pricing information.
 */
exports.getPrices = (country, gameIds, offset = 0, prices = []) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const filteredIds = gameIds.slice(offset, offset + constants_1.PRICE_LIST_LIMIT);
        const priceData = yield node_fetch_1.default(`${constants_1.PRICE_GET_URL}?${querystring_1.stringify(Object.assign({ country, ids: filteredIds, limit: constants_1.PRICE_LIST_LIMIT }, constants_1.PRICE_GET_OPTIONS))}`);
        if (priceData.status === 403)
            throw new Error('PRICE_Rate_Limit');
        if (!priceData.ok)
            throw new Error('PRICE_get_request_failed');
        const response = yield priceData.json();
        if (response.prices && response.prices.length + offset < gameIds.length) {
            const accumulatedPrices = prices.concat(response.prices);
            return yield exports.getPrices(country, gameIds, offset + constants_1.PRICE_LIST_LIMIT, accumulatedPrices);
        }
        else if (response.prices) {
            response.prices = response.prices.concat(prices);
            return response;
        }
        return response;
    }
    catch (err) {
        if (/(?:PRICE_Rate_Limit)/i.test(err.toString()))
            throw new utils_1.EshopError('Looks like you ran into a rate limit while getting price data, please do not spam the Nintendo servers.');
        if (/(?:PRICE_get_request_failed)/i.test(err.toString()))
            throw new utils_1.EshopError('Fetching of eShop prices failed');
        throw err;
    }
});
//# sourceMappingURL=getPrices.js.map